# Generated by Django 4.2.3 on 2023-09-20 09:40

from django.db import migrations
import pandas as pd
from system_management.constants import (
    PERSONAL, 
    BUSINESS
)


def create_survey_category(main_catergory, apps):
    SurveyCategory = apps.get_model('surveys', 'SurveyCategory')
    SurveyCategoryType = apps.get_model('surveys', 'SurveyCategoryType')
    SurveyApplicationTitle = apps.get_model('surveys', 'SurveyApplicationTitle')
    main_cat_created = SurveyCategory.objects.create(
        name=main_catergory[0],
        type_id=main_catergory[1]
    )
    for sub_catergory in main_catergory[2]:
            sub_cat_created = SurveyCategoryType.objects.create(
                name=sub_catergory[0],
                category_id=main_cat_created.id
            )
            for sub_type in sub_catergory[1]:
                SurveyApplicationTitle.objects.create(
                    subcategory_type_id=sub_cat_created.id,
                    name=sub_type
                )
    return None


def add_connection_values(apps, schema_editor):
    ApplicationType = apps.get_model('application', 'ApplicationType')
    personal_survey = ApplicationType.objects.get(
        name=PERSONAL
    )
    business_survey = ApplicationType.objects.get(
        name=BUSINESS
    )

    location_business = [
        "Building",
        "Surrounds",
        "External Site Exposures",
        "Natural Risks"
    ]

    security_business = [
        "Perimeter",
        "Access Points",
        "CCTV Cameras",
        "On-site Security",
        "Alarm",
        "Flood Lighting"
    ]

    fire_business = [
        "Fire Hydrants",
        "Fire Hose Reels",
        "Fire Extinguishers",
        "Sprinkler System",
        "Extraction System",
        "Fire Alarms & Smoke Detectors",
        "Fire Breaks around premises",
        "Equipment above serviced & in working order"
    ]

    flammables_business = [
        "Flammables"
    ]

    storage_business = [
        "Storage"
    ]

    hot_works_business = [
        "Hot Works"
    ]

    electricity_business = [
        "Electricity"
    ]

    water_business = [
        "Supply"
    ]

    lightning_business = [
        "Lightning"
    ]

    money_business = [
        "Money"
    ]

    manufacturing_business = [
        "Manufacturing"
    ]

    risk_business = [
        ("Location", location_business),
        ("Security", security_business),
        ("Fire protection", fire_business),
        ("Flammables", flammables_business),
        ("Storage", storage_business),
        ("Hot works", hot_works_business),
        ("Electricity", electricity_business),
        ("Water", water_business),
        ("Lightning", lightning_business),
        ("Money", money_business),
        ("Manufacturing", manufacturing_business)
    ]

    inspection_business = [
        ("Vehicles", ["Vehicles"]),
        ("Plant & Machinery", ["Plant & Machinery"]),
        ("Computer Equipment", ["Computer Equipment"])
    ]

    financial_business = [
        ("Business Interruption", ["Business Interruption"])
    ]

    liability_business = [
        ("Exposures", ["Exposures"])
    ]

    location_list = [
        "Building",
        "Surrounds",
        "External Site Exposures",
        "Natural Risks"
    ]

    security_list = [
        "Perimeter",
        "Access Points",
        "CCTV Cameras",
        "On-site Security",
        "Alarm",
        "Safes"
    ]

    electricity_list = [
        'Electricity'
    ]

    risk_personal = [
        ("Location", location_list),
        ("Security", security_list),
        ("Electricity", electricity_list),
        ("Water", ["Supply"]),
        ("Lightning", ["Lightning"])
    ]

    inspection_personal = [
        ("Vehicles", ["Vehicles"]),
        ("Motorcycles", ["Motorcycles"]),
        ("Towables", ["Towables"]),
        ("Smallcraft", ["Smallcraft"]),
        ("Specified Items", ["Specified Items"]),
        ("Jewellery or Watches", ["Jewellery or Watches"]),
        ("Sporting equipment", ["Sporting equipment"]),
        ("Computer equipment", ["Computer equipment"])
    ]

    home_content_personal = [
        ("Appliances", ["Appliances"]),
        ("Artwork", ["Artwork"]),
        ("Carpets", ["Carpets"]),
        ("Clothing", ["Clothing"]),
        ("Collectables", ["Collectables"]),
        ("Computer Equipment", ["Computer Equipment"]),
        ("Curtains", ["Curtains"]),
        ("Cutlery or Crockery", ["Cutlery or Crockery"]),
        ("Electronic Items", ["Electronic Items"]),
        ("Furniture", ["Furniture"]),
        ("Garden Equipment", ["Garden Equipment"]),
        ("Outdoor Furniture", ["Outdoor Furniture"]),
        ("Outdoor Equipment", ["Outdoor Equipment"]),
        ("Tools", ["Tools"]),
        ("Other", ["Other"])
    ]

    list_main_category = [
        ('Risk', f'{personal_survey.id}', risk_personal),
        ('Inspection', f'{personal_survey.id}', inspection_personal),
        ('Home contents', f'{personal_survey.id}', home_content_personal),
        ('Risk', f'{business_survey.id}', risk_business),
        ('Inspection', f'{business_survey.id}', inspection_business),
        ('Financial', f'{business_survey.id}', financial_business),
        ('Liability', f'{business_survey.id}', liability_business)
    ]
    [
        create_survey_category(main_catergory, apps)
        for main_catergory in list_main_category
    ]

#######################################################################################################################################################################

def add_question(subcat_typequestions, df_main_category, apps):
    StandardQuestion = apps.get_model('surveys', 'SurveyQuestion')
    SurveyQuestionOption = apps.get_model('surveys', 'SurveyQuestionOption')

    for typequestions in subcat_typequestions:

        subcat = typequestions[0]
        df_sub_category = df_main_category.loc[df_main_category['sub_category'] == subcat]
        questions = typequestions[1]

        for question in questions:
            subtype = question[0]
            subtype_id = df_sub_category.loc[df_sub_category['name'] == subtype]
            application_title_id = subtype_id['id'].values.tolist()[0]

            question_value = question[1]
            question_type = question[2]
            options = question[3]
            additional_reason = question[4]

            if additional_reason == 'no-reason':
                additional_reason = False

            else:
                additional_reason = True

            if question_type == "options":
                question_type = 'selection'
                
                question = StandardQuestion.objects.create(
                    question=question_value,
                    question_type=question_type,
                    is_mandatory=True,
                    has_checkbox=False,
                    has_selection=True,
                    has_text=False,
                    has_date=False,
                    has_file=False,
                    has_location=False,
                    has_other_field=additional_reason,
                    application_title_id = application_title_id
                )
                
                question_id = question.id

                [
                    SurveyQuestionOption.objects.create(
                        question_id=question_id,
                        option=option_value
                    )
                    for option_value in options
                ]

            elif question_type == "text":
                question_type = 'text'
                
                question = StandardQuestion.objects.create(
                    question=question_value,
                    question_type=question_type,
                    is_mandatory=True,
                    has_checkbox=False,
                    has_selection=False,
                    has_text=True,
                    has_date=False,
                    has_file=False,
                    has_location=False,
                    has_other_field=additional_reason,
                    application_title_id = application_title_id
                )

            elif question_type == "file":
                question_type = 'file'
                
                question = StandardQuestion.objects.create(
                    question=question_value,
                    question_type=question_type,
                    is_mandatory=True,
                    has_checkbox=False,
                    has_selection=False,
                    has_text=False,
                    has_date=False,
                    has_file=True,
                    has_location=False,
                    has_other_field=additional_reason,
                    application_title_id = application_title_id
                )

    return None

#######################################################################################################################################################################

def create_questions(main_category, df_main, apps):
    if main_category == "Risk":
        df_main_category = df_main[df_main['main_category'] == main_category]

        location_questions = [
            (
                "Building",
                "Occupied",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Building",
                "Construction",
                "options",
                ['Walls', 'Roof', 'Roof pitch'],
                'no-reason'
            ),
            (
                "Building",
                "Area",
                "options",
                ['Open', 'Subdivided by Fire Walls'],
                'no-reason'
            ),
            (
                "Building",
                "Square meterage",
                "text",
                [],
                'no-reason'
            ),
            (
                "Building",
                "Stand alone",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Building",
                "Number of floors",
                "text",
                [],
                'no-reason'
            ),
            (
                "Building",
                "Basement levels",
                "text",
                [],
                'no-reason'
            ),
            (
                "Building",
                "Tenants",
                "options",
                ['Single', 'Multiple'],
                'reason'
            ),
            (
                "Building",
                "Solar",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Building",
                "Inverters",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Building",
                "Generators",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Surrounds",
                "Perimeter type",
                "options",
                ['Wall', "Fence"],
                'reason'
            ),
            (
                "External Site Exposures",
                "Neighbours",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "External Site Exposures",
                "Open areas",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "External Site Exposures",
                "Rivers & dams",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "External Site Exposures",
                "Informal settlements",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Natural Risks",
                "Any previous occurances / damages?",
                "options",
                ['Yes', "No"],
                'no-reason'
            )
        ]
        security_questions = [
            (
                "Perimeter",
                "Electric fence",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Perimeter",
                "Controlled access",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Perimeter",
                "Roller shutter doors",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Access Points",
                "Burglar bars",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Access Points",
                "Security gates",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Access Points",
                "Roller shutter doors",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "CCTV Cameras",
                "CCTV Cameras",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "On-site Security",
                "Present",
                "options",
                ['Yes (Day)', 'Yes (Night)', 'No'],
                'no-reason'
            ),
            (
                "On-site Security",
                "24 hr guards",
                "options",
                ['Yes (Day)', 'Yes (Night)', 'No'],
                'no-reason'
            ),
            (
                "Alarm",
                "Alarm",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Alarm",
                "Linked to Armed Response",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Flood Lighting",
                "Flood Lighting",
                "options",
                ['Yes', 'No'],
                'no-reason'
            )
        ]
        fire_questions = [
            (
                "Fire Hydrants",
                "Fire Hydrants",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Fire Hose Reels",
                "Fire Hose Reels",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Fire Hose Reels",
                "Number",
                "text",
                [],
                'no-reason'
            ),
            (
                "Fire Extinguishers",
                "Fire Extinguishers",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Fire Extinguishers",
                "Number",
                "text",
                [],
                'no-reason'
            ),
            (
                "Fire Extinguishers",
                "Type",
                "text",
                [],
                'no-reason'
            ),
            (
                "Fire Extinguishers",
                "Size",
                "text",
                [],
                'no-reason'
            ),
            (
                "Sprinkler System",
                "Sprinkler System",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Sprinkler System",
                "Approval",
                "options",
                ['ASIB', 'SAIFP'],
                'no-reason'
            ),
            (
                "Extraction System",
                "Extraction System",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Fire Alarms & Smoke Detectors",
                "Fire Alarms & Smoke Detectors",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Fire Breaks around premises",
                "Fire Breaks around premises",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Equipment above serviced & in working order",
                "Equipment above serviced & in working order",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Equipment above serviced & in working order",
                "Date Received",
                "text",
                [],
                'no-reason'
            ),
        ]
        flammable_questions = [
            (
                "Flammables",
                "Are Flammable Liquids used / stored",
                "text",
                [],
                'no-reason'
            ),
            (
                "Flammables",
                "Flammable Store approved",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Flammables",
                "Decanting Processes",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Flammables",
                "Separate Storage Areas",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Flammables",
                "Approved Gas Storage Facilities",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Flammables",
                "Spray Painting on Site",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Flammables",
                "Bulk Fuel Installations",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Flammables",
                "LPG Installations",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
        ]
        storage_questions = [
            (
                "Storage",
                "Storage Area",
                "text",
                [],
                'no-reason'
            ),
            (
                "Storage",
                "Types of Pallets",
                "options",
                ['Wood', 'Plastic', 'Other'],
                'no-reason'
            ),
            (
                "Storage",
                "Nature of Goods",
                "text",
                [],
                'no-reason'
            ),
            (
                "Storage",
                "Maximum Storage Height",
                "text",
                [],
                'no-reason'
            ),
        ]
        hot_works_questions = [
            (
                "Hot Works",
                "Storage",
                "text",
                [],
                'no-reason'
            ),
            (
                "Hot Works",
                "Responsible Persons & Experience",
                "text",
                [],
                'no-reason'
            ),
            (
                "Hot Works",
                "Dedicated Area allocated",
                "options",
                ['Yes', "No"],
                'no-reason'
            )
        ]
        electricity_questions = [
            (
                "Electricity",
                "Supply",
                "options",
                ['Eskom', 'Municipality', 'Own'],
                'no-reason'
            ),
            (
                "Electricity",
                "ECC",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "ECC Date",
                "text",
                [],
                'no-reason'
            ),
            (
                "Electricity",
                "Distribution Boards",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Distribution Boards free from obstructions",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Distribution Boards surge protectors fitted",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Electrical Sub-stations",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Transformers",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Back-up power supply",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Back-up power supply type",
                "text",
                [],
                'no-reason'
            ),
        ]
        water_questions = [
            (
                "Supply",
                "Supply",
                "options",
                ['Municipal', 'Bore hole', 'Storage Tanks'],
                'no-reason'
            )
        ]
        lightning_questions = [
            (
                "Lightning",
                "Prevalence in the area",
                "options",
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Lightning",
                "Protections in place",
                "options",
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Lightning",
                "Protections in place type",
                "text",
                [],
                'no-reason'
            )
        ]
        money_questions = [
            (
                "Money",
                "Cash handling on the premises",
                "options",
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Money",
                "Receptacles",
                "text",
                [],
                'no-reason'
            ),
            (
                "Money",
                "Banking processes",
                "text",
                [],
                'no-reason'
            )
        ]
        manufacturing_questions = [
            (
                "Manufacturing",
                "Raw Materials Used",
                'text',
                [],
                'no-reason'
            ),
            (
                "Manufacturing",
                "Suppliers",
                "options",
                ["Local", "International"],
                'no-reason'
            ),
            (
                "Manufacturing",
                "Finished Products",
                'text',
                [],
                'no-reason'
            ),
            (
                "Manufacturing",
                "Process",
                "options",
                ["Single Line", "Multi Line"],
                'no-reason'
            ),
            (
                "Manufacturing",
                "Equipment Used sourced",
                "options",
                ["Locally", "Internationally"],
                'no-reason'
            )
        ]
        list_risk = [
            ("Location", location_questions),
            ("Security", security_questions),
            ("Fire protection", fire_questions),
            ("Flammables", flammable_questions),
            ("Storage", storage_questions),
            ("Hot works", hot_works_questions),
            ("Electricity", electricity_questions),
            ("Water", water_questions),
            ("Lightning", lightning_questions),
            ("Money", money_questions),
            ("Manufacturing", manufacturing_questions),
        ]
        add_question(list_risk, df_main_category, apps)

    if main_category == "Inspection":
        df_main_category = df_main[df_main['main_category'] == main_category]
        vehicles_questions = [
            (
                "Vehicles",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Vehicles",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Vehicles",
                "Engin No",
                'text',
                [],
                'no-reason'
            ),
            (
                "Vehicles",
                "Reg",
                'text',
                [],
                'no-reason'
            ),
            (
                "Vehicles",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        plant_machinery_questions = [
            (
                "Plant & Machinery",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Plant & Machinery",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Plant & Machinery",
                "Serial No",
                'text',
                [],
                'no-reason'
            ),
            (
                "Plant & Machinery",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        computer_questions = [
            (
                "Computer Equipment",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Computer Equipment",
                "Model",
                'text',
                [],
                'no-reason'
            ),
            (
                "Computer Equipment",
                "Serial No",
                'text',
                [],
                'no-reason'
            ),
             (
                "Computer Equipment",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        list_inspection = [
            ("Vehicles", vehicles_questions),
            ("Plant & Machinery", plant_machinery_questions),
            ("Computer Equipment", computer_questions)
        ]
        add_question(list_inspection, df_main_category, apps)

    if main_category == "Financial":
        df_main_category = df_main[df_main['main_category'] == main_category]
        business_questions = [
            (
                "Business Interruption",
                "Availability of Management Accounts",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Business Interruption",
                "Financial Year-end",
                'text',
                [],
                'no-reason'
            ),
            (
                "Business Interruption",
                "SARS - TCC",
                'options',
                ["Yes", "No"],
                'no-reason'
            )
        ]
        list_financial = [
            ("Business Interruption", business_questions)
        ]
        add_question(list_financial, df_main_category, apps)

    if main_category == "Liability":
        df_main_category = df_main[df_main['main_category'] == main_category]
        exposures_questions = [
            (
                "Exposures",
                "Public",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Product",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Defective Workmanship",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Cyber",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Directors & Officers",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Professional Indemnity",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Defamantion",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Pollution",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Enviromental",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Employers",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Care, Custody & Control",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Trustee",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Exposures",
                "Excess Motor",
                'options',
                ["Yes", "No"],
                'no-reason'
            ),
        ]
        list_liability = [
            ("Exposures", exposures_questions)
        ]
        add_question(list_liability, df_main_category, apps)

    return main_category


def add_connection_questions(apps, schema_editor):
    ApplicationType = apps.get_model('application', 'ApplicationType')
    SurveyApplicationTitle = apps.get_model('surveys', 'SurveyApplicationTitle')

    business_survey = ApplicationType.objects.get(name=BUSINESS)

    type_cat = SurveyApplicationTitle.objects.filter(
        subcategory_type_id__category_id__type_id=business_survey.id
    ).values('id',
             'name',
             'subcategory_type_id',
             'subcategory_type_id__name',
             'subcategory_type_id__category_id',
             'subcategory_type_id__category_id__name',
             'subcategory_type_id__category_id__type_id',
             )

    df_main = pd.DataFrame(type_cat)

    if df_main.empty:
        return

    else:
        df_main = df_main.rename(columns={
            'subcategory_type_id__name': "sub_category",
            'subcategory_type_id__category_id__name': "main_category",
        })
        main_categories = pd.DataFrame({'main_category': df_main["main_category"].unique()})
        main_categories["main_category"] = main_categories["main_category"].apply(
            lambda main_category: create_questions(main_category, df_main, apps))
        return


#######################################################################################################################################################################

def get_comment_questions(subcategory):
    list_questions = [
        (
            f"{subcategory}",
            "Comment",
            'text',
            [],
            'no-reason'
        ),
        (
            f"{subcategory}",
            "Note",
            'text',
            [],
            'reason'
        )
    ]

    return list_questions


def create_questions_personal(main_category, df_main, apps):
    if main_category == 'Risk':
        df_main_category = df_main[df_main['main_category'] == main_category]
        location_questions = [
            (
                "Building",
                "Occupied",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Building",
                "Construction",
                "options",
                ['Walls', 'Roof', 'Roof pitch'],
                'no-reason'
            ),
            (
                "Building",
                "Square meterage",
                "text",
                [],
                'no-reason'
            ),
            (
                "Building",
                "Stand alone",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Building",
                "Number of floors",
                "text",
                [],
                'no-reason'
            ),
            (
                "Building",
                "Tenants",
                "text",
                [],
                'reason'
            ),
            (
                "Building",
                "Solar",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Building",
                "Inverters",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Building",
                "Generators",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Building",
                "Boundary",
                "options",
                ['Wall', "Fence"],
                'reason'
            ),
            (
                "Building",
                "Access gate",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Building",
                "Lapas",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Building",
                "Lapas size",
                "text",
                [],
                'no-reason'
            ),
            (
                "Building",
                "Lapas type",
                "text",
                [],
                'no-reason'
            ),
            (
                "Building",
                "Lapas distance from house",
                "text",
                [],
                'no-reason'
            ),
            (
                "Building",
                "Swimming Pool",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Building",
                "Other Additions",
                "options",
                ['Yes', 'No'],
                'reason'
            ),
            (
                "Surrounds",
                "Perimeter type",
                "options",
                ['Wall', "Fence"],
                'reason'
            ),
            (
                "External Site Exposures",
                "Open areas",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "External Site Exposures",
                "Rivers & dams",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "External Site Exposures",
                "Informal settlements",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Natural Risks",
                "Any previous occurances / damages?",
                "options",
                ['Yes', "No"],
                'no-reason'
            )
        ]
        security_questions = [
            (
                "Perimeter",
                "Electric fence",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Perimeter",
                "Controlled access",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Perimeter",
                "Roller shutter doors",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Access Points",
                "Burglar bars",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Access Points",
                "Security gates",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "CCTV Cameras",
                "CCTV Cameras",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "On-site Security",
                "Present",
                "options",
                ['Yes (Day)', 'Yes (Night)', 'No'],
                'no-reason'
            ),
            (
                "On-site Security",
                "24 hr guards",
                "options",
                ['Yes (Day)', 'Yes (Night)', 'No'],
                'no-reason'
            ),
            (
                "Alarm",
                "Alarm",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Alarm",
                "Linked to Armed Response",
                "options",
                ['Yes', 'No'],
                'no-reason'
            ),
            (
                "Safes",
                "Safes",
                "options",
                ['Yes', 'No'],
                'reason'
            )
        ]
        electricity_questions = [
            (
                "Electricity",
                "Supply",
                "options",
                ['Eskom', 'Municipality', 'Own'],
                'no-reason'
            ),
            (
                "Electricity",
                "ECC",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "ECC Date",
                "text",
                [],
                'no-reason'
            ),
            (
                "Electricity",
                "Distribution Boards free from obstructions",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Distribution Boards surge protectors fitted",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Back-up power supply",
                "options",
                ['Yes', "No"],
                'no-reason'
            ),
            (
                "Electricity",
                "Back-up power supply type",
                "text",
                [],
                'no-reason'
            ),
        ]
        water_questions = [
            (
                "Supply",
                "Supply",
                "options",
                ['Municipal', 'Bore hole', 'Storage Tanks'],
                'no-reason'
            )
        ]
        lightning_questions = [
            (
                "Lightning",
                "Prevalence in the area",
                "options",
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Lightning",
                "Protections in place",
                "options",
                ["Yes", "No"],
                'no-reason'
            ),
            (
                "Lightning",
                "Protections in place type",
                "text",
                [],
                'no-reason'
            )
        ]

        list_risk = [
            ("Location", location_questions),
            ("Security", security_questions),
            ("Electricity", electricity_questions),
            ("Water", water_questions),
            ("Lightning", lightning_questions)
        ]

        add_question(list_risk, df_main_category, apps)

    if main_category == 'Inspection':
        df_main_category = df_main[df_main['main_category'] == main_category]
        vehicles_questions = [
            (
                "Vehicles",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Vehicles",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Vehicles",
                "Engin No",
                'text',
                [],
                'no-reason'
            ),
            (
                "Vehicles",
                "Reg",
                'text',
                [],
                'no-reason'
            ),
             (
                "Vehicles",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        motorcycles_questions = [
            (
                "Motorcycles",
                "Description",
                'text',
                [],
                'no-reason'
            ),
             (
                "Motorcycles",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Motorcycles",
                "Engin No",
                'text',
                [],
                'no-reason'
            ),
            (
                "Motorcycles",
                "Reg",
                'text',
                [],
                'no-reason'
            ),
            (
                "Motorcycles",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        towables_questions = [
            (
                "Towables",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Towables",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Towables",
                "Engin No",
                'text',
                [],
                'no-reason'
            ),
            (
                "Towables",
                "Reg",
                'text',
                [],
                'no-reason'
            ),
            (
                "Towables",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        smallcraft_questions = [
            (
                "Smallcraft",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Smallcraft",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Smallcraft",
                "Engin No",
                'text',
                [],
                'no-reason'
            ),
            (
                "Smallcraft",
                "Reg",
                'text',
                [],
                'no-reason'
            ),
            (
                "Smallcraft",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        specified_items_questions = [
            (
                "Specified Items",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Specified Items",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Specified Items",
                "Serial No",
                'text',
                [],
                'no-reason'
            ),
             (
                "Specified Items",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        jewellery_or_watches_questions = [
            (
                "Jewellery or Watches",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Jewellery or Watches",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Jewellery or Watches",
                "Serial No",
                'text',
                [],
                'no-reason'
            )
        ]
        sporting_equipment_questions = [
            (
                "Sporting equipment",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Sporting equipment",
                "VIN",
                'text',
                [],
                'no-reason'
            ),
            (
                "Sporting equipment",
                "Serial No",
                'text',
                [],
                'no-reason'
            ),
            (
                "Sporting equipment",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        computer_equipment_questions = [
            (
                "Computer equipment",
                "Description",
                'text',
                [],
                'no-reason'
            ),
            (
                "Computer equipment",
                "Model",
                'text',
                [],
                'no-reason'
            ),
            (
                "Computer equipment",
                "Serial No",
                'text',
                [],
                'no-reason'
            ),
            (
                "Computer equipment",
                "Photos",
                'file',
                [],
                'no-reason'
            )
        ]
        list_inspection = [
            ("Vehicles", vehicles_questions),
            ("Motorcycles", motorcycles_questions),
            ("Towables", towables_questions),
            ("Smallcraft", smallcraft_questions),
            ("Specified Items", specified_items_questions),
            ("Jewellery or Watches", jewellery_or_watches_questions),
            ("Sporting equipment", sporting_equipment_questions),
            ("Computer equipment", computer_equipment_questions)
        ]
        add_question(list_inspection, df_main_category, apps)

    if main_category == 'Home contents':
        df_main_category = df_main[df_main['main_category'] == main_category]
        list_home_content = [
            ("Appliances", get_comment_questions("Appliances")),
            ("Artwork", get_comment_questions("Artwork")),
            ("Carpets", get_comment_questions("Carpets")),
            ("Clothing", get_comment_questions("Clothing")),
            ("Collectables", get_comment_questions("Collectables")),
            ("Computer Equipment", get_comment_questions("Computer Equipment")),
            ("Curtains", get_comment_questions("Curtains")),
            ("Cutlery or Crockery", get_comment_questions("Cutlery or Crockery")),
            ("Electronic Items", get_comment_questions("Electronic Items")),
            ("Furniture", get_comment_questions("Furniture")),
            ("Garden Equipment", get_comment_questions("Garden Equipment")),
            ("Outdoor Furniture", get_comment_questions("Outdoor Furniture")),
            ("Outdoor Equipment", get_comment_questions("Outdoor Equipment")),
            ("Tools", get_comment_questions("Tools")),
            ("Other", get_comment_questions("Other"))
        ]
        add_question(list_home_content, df_main_category, apps)

    return main_category


def add_connection_questions_personal(apps, schema_editor):
    ApplicationType = apps.get_model('application', 'ApplicationType')
    SurveyApplicationTitle = apps.get_model('surveys', 'SurveyApplicationTitle')

    personal_survey = ApplicationType.objects.get(name=PERSONAL)

    type_cat = SurveyApplicationTitle.objects.filter(
        subcategory_type_id__category_id__type_id=personal_survey.id
    ).values('id',
             'name',
             'subcategory_type_id',
             'subcategory_type_id__name',
             'subcategory_type_id__category_id',
             'subcategory_type_id__category_id__name',
             'subcategory_type_id__category_id__type_id',
    )

    df_main = pd.DataFrame(type_cat)

    if df_main.empty:
        return

    else:
        df_main = df_main.rename(columns={
            'subcategory_type_id__name': "sub_category",
            'subcategory_type_id__category_id__name': "main_category",
        })
        main_categories = pd.DataFrame({'main_category': df_main["main_category"].unique()})
        main_categories["main_category"] = main_categories["main_category"].apply(
            lambda main_category: create_questions_personal(main_category, df_main, apps))
        return
    

class Migration(migrations.Migration):

    dependencies = [
        ('surveys', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_connection_values),
        migrations.RunPython(add_connection_questions_personal),
        migrations.RunPython(add_connection_questions),
    ]